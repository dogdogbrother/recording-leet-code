/**
 * @param {number[]} deck
 * @return {boolean}
 */

/**

给定一副牌，每张牌上都写着一个整数。
此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1 组或更多组：

每组都有 X 张牌。
组内所有的牌上都写着相同的整数。
仅当你可选的 X >= 2 时返回 true。

示例 1：
    输入：[1,2,3,4,4,3,2,1]
    输出：true
    解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]

示例 2：
    输入：[1,1,1,2,2,2,3,3]
    输出：false
    解释：没有满足要求的分组。

示例 5：
    输入：[1,1,2,2,2,2]
    输出：true
    解释：可行的分组是 [1,1]，[2,2]，[2,2]

 */

/**
 这题是简单类型的，但是没有思路，解不开。看着好像不难，不过是把牌分成对组，如果剩下单牌就是失败。如何让程序一开始就知道所有的牌能不能分组呢？
 经过查看评论和慕课的讲解，发现查找公约数是解题的关键，什么意思呢，打个比方 1111222222 ,这里面有4个1和6个2，4和6都有最大公约数，那就是2.
 我们可以分成[11,11,22,22,22],如果没有公约数就代表分组后有剩余。再举个例子，1111222222333，就不行，问题出在了3的长度是3，和上面的公约数不匹配。
 但是如果是三个1六个2就没问题，因为公约数是三。

 规律到这就总结出来了，所有数字长度的最大公约数就是我们的X值，也就是几张牌一组。

 难点在于，我们怎么求全部数组的公约数呢，这个也是这个题目中最难的点，有好几个问题。
 1. 首先第一个问题是，怎么求数组中的第0位和第一位的公约数？
    最简单的方法就是取模，10%3 等于1，正常我们以为公约数就是1了，事实上也的确是1，但是 10%3=1 能代表公约数是1吗？
    不能！！ 如果11%3 = 2,明显2并不是公约数，正确的做法是继续取模，用3%2=1,再用2%1=0，只有取余到0了，这才能说明1是公约数，
    所以10%3的过程是这样的，10%3=1 》 3%1=0         1是公约数
    3%10的过程是这样的， 3%10=3 》 10%3=1 发现和上面的一样了。我觉得这个应该就是辗转相除法。
 2. 求到了第0位和第1位的最大公约数，那么怎么把第2位带上呢?
    其实就是用求来的公约数当参数，和第2位比较就行了。
*/

var hasGroupsSizeX = function(deck) {
    let group = [];  
    let tmp = {};       //这是和桶，key值是参数的数值，value是出现的个数
    deck.forEach(item => {      //把参数数组放进桶里面
        tmp[item] = tmp[item] ? tmp[item] + 1 : 1
    })
    for (let v of Object.values(tmp)) { //然后把每个牌出现的次数放到数组里面
        group.push(v)
    }

    // 代码到这就会出现个问题，我们不知道传进来的参数有什么数字，而是知道了每个数字出现的次数。例如[1,1,1,2,2,3,10]，现在就成了[3,2,1,1]
    //然后求他们的最大公约数
    let gcd = (a, b) => {   
        if (b === 0) {
        return a
        } else {
        return gcd(b, a % b)
        }
    }
    while (group.length > 1) {
        let a = group.shift()
        let b = group.shift()
        let v = gcd(a, b)
        if (v === 1) {
        return false
        } else {
        group.unshift(v)
        }
    }
    // 如果 group.length存在并且公约数大于一，就返回 true
    return group.length ? group[0] > 1 : false
};
console.log(hasGroupsSizeX([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,8,8,8,9,9,9,10,10,10]))

                            // function gcd(a,b){  //10%3的求公约数的例子
                            //     // 第一次进来a === 10;
                            //     // 第一次进来 b === 3;


                            //     // 第2次进来 a === 3;
                            //     // 第2次进来 b === 1

                            //     // 第3次进来 a === 1
                            //     // 第3次进来 b === 0  递归结束，返回a，也就是1.得到最大公约数是1
                            //     if (b===0) {
                            //         return a;
                            //     }else{
                            //         return gcd(b,a%b)
                            //         // 第1次递归的参数是 3,(10%3 === 1)
                            //         // 第2次递归的参数是 1（3%1 === 0）
                            //     }
                            // }
                            // console.log(gcd(10,3));


